import tensorflow as tf
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Generate binary classification dataset
X, y = make_classification(n_samples=1000, n_features=10, n_classes=2, random_state=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

# Build logistic regression model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(1, activation='sigmoid', input_shape=(10,))
])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train and evaluate
model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=0)
loss, acc = model.evaluate(X_test, y_test)
print(f"Accuracy: {acc:.2f}")

# Q: Why sigmoid for logistic regression?
# A: It outputs values between 0 and 1, representing probabilities.
